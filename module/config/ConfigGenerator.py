import re
from copy import deepcopy

from cached_property import cached_property

from deploy.Windows.utils import DEPLOY_TEMPLATE, poor_yaml_read, poor_yaml_write
from module.base.timer import timer
from module.config.config_updater import ConfigUpdater
from module.config.deep import deep_default, deep_get, deep_iter, deep_set
from module.config.server import VALID_SERVER
from module.config.utils import *

CONFIG_IMPORT = '''
import datetime

# This file was automatically generated by module/config/config_updater.py.
# Don't modify it manually.


class GeneratedConfig:
    """
    Auto generated configuration
    """
'''.strip().split('\n')

DICT_GUI_TO_INGAME = {
    'zh-CN': 'cn',
    'en-US': 'en',
    'ja-JP': 'jp',
    'zh-TW': 'cht',
    'es-ES': 'es',
}


def gui_lang_to_ingame_lang(lang: str) -> str:
    return DICT_GUI_TO_INGAME.get(lang, 'en')

def get_generator():
    from module.editor.base.code_generator import CodeGenerator
    return CodeGenerator()

class ConfigGenerator:
    @cached_property
    def argument(self):
        """
        Load argument.yaml, and standardise its structure.

        <group>:
            <argument>:
                type: checkbox|select|textarea|input
                value:
                option (Optional): Options, if argument has any options.
                validate (Optional): datetime
        """
        data = {}
        raw = read_file(filepath_argument('argument'))

        def option_add(keys, options):
            options = deep_get(raw, keys=keys, default=[]) + options
            deep_set(raw, keys=keys, value=options)

        # Insert packages
        option_add(keys='Emulator.PackageName.option', options=list(VALID_SERVER.keys()))
        # Insert dungeons
        from tasks.dungeon.keywords import DungeonList
        calyx_golden = [dungeon.name for dungeon in DungeonList.instances.values() if dungeon.is_Calyx_Golden_Memories]
        calyx_golden += [dungeon.name for dungeon in DungeonList.instances.values() if dungeon.is_Calyx_Golden_Aether]
        calyx_golden += [dungeon.name for dungeon in DungeonList.instances.values() if
                         dungeon.is_Calyx_Golden_Treasures]
        # calyx_crimson
        from tasks.rogue.keywords import KEYWORDS_ROGUE_PATH as Path
        order = [Path.Destruction, Path.Preservation, Path.The_Hunt, Path.Abundance,
                 Path.Erudition, Path.Harmony, Path.Nihility, Path.Remembrance]
        calyx_crimson = []
        for path in order:
            calyx_crimson += [dungeon.name for dungeon in DungeonList.instances.values()
                              if dungeon.Calyx_Crimson_Path == path]
        # stagnant_shadow
        from tasks.character.keywords import CombatType
        stagnant_shadow = []
        for type_ in CombatType.instances.values():
            stagnant_shadow += [dungeon.name for dungeon in DungeonList.instances.values()
                                if dungeon.Stagnant_Shadow_Combat_Type == type_]
        cavern_of_corrosion = [dungeon.name for dungeon in DungeonList.instances.values() if
                               dungeon.is_Cavern_of_Corrosion]
        option_add(
            keys='Dungeon.Name.option',
            options=cavern_of_corrosion + calyx_golden + calyx_crimson + stagnant_shadow
        )
        # Double events
        option_add(keys='Dungeon.NameAtDoubleCalyx.option', options=calyx_golden + calyx_crimson)
        option_add(keys='Dungeon.NameAtDoubleRelic.option', options=cavern_of_corrosion)
        option_add(
            keys='Weekly.Name.option',
            options=[dungeon.name for dungeon in DungeonList.instances.values() if dungeon.is_Echo_of_War])
        # OrnamentExtraction
        ornament = [dungeon.name for dungeon in DungeonList.instances.values() if dungeon.is_Ornament_Extraction]
        option_add(keys='Ornament.Dungeon.option', options=ornament)
        # Insert characters
        from tasks.character.aired_version import list_support_characters
        unsupported_characters = []
        characters = [character.name for character in list_support_characters()
                      if character.name not in unsupported_characters]
        option_add(keys='DungeonSupport.Character.option', options=characters)
        # Insert assignments
        from tasks.assignment.keywords import AssignmentEntry
        assignments = [entry.name for entry in AssignmentEntry.instances.values()]
        for i in range(4):
            option_add(keys=f'Assignment.Name_{i + 1}.option', options=assignments)
        # Insert planner items
        from tasks.planner.keywords.classes import ItemBase
        for item in ItemBase.instances.values():
            if item.is_ItemValuable:
                continue
            base = item.group_base
            deep_set(raw, keys=['Planner', f'Item_{base.name}'], value={
                'stored': 'StoredPlanner',
                'display': 'display',
                'type': 'planner',
            })

        # Load
        for path, value in deep_iter(raw, depth=2):
            arg = {
                'type': 'input',
                'value': '',
                # option
            }
            if not isinstance(value, dict):
                value = {'value': value}
            arg['type'] = data_to_type(value, arg=path[1])
            if arg['type'] in ['stored', 'planner']:
                value['value'] = {}
                arg['display'] = 'hide'  # Hide `stored` by default
            if isinstance(value['value'], datetime):
                arg['type'] = 'datetime'
                arg['validate'] = 'datetime'
            # Manual definition has the highest priority
            arg.update(value)
            deep_set(data, keys=path, value=arg)

        return data

    @cached_property
    def task(self):
        """
        <task_group>:
            <task>:
                <group>:
        """
        return read_file(filepath_argument('task'))

    @cached_property
    def default(self):
        """
        <task>:
            <group>:
                <argument>: value
        """
        return read_file(filepath_argument('default'))

    @cached_property
    def override(self):
        """
        <task>:
            <group>:
                <argument>: value
        """
        return read_file(filepath_argument('override'))

    @cached_property
    def gui(self):
        """
        <i18n_group>:
            <i18n_key>: value, value is None
        """
        return read_file(filepath_argument('gui'))

    @cached_property
    @timer
    def args(self):
        """
        Merge definitions into standardised json.

            task.yaml ---+
        argument.yaml ---+-----> args.json
        override.yaml ---+
         default.yaml ---+

        """
        # Construct args
        data = {}
        for path, groups in deep_iter(self.task, depth=3):
            if 'tasks' not in path:
                continue
            task = path[2]
            # Add storage to all task
            # groups.append('Storage')
            for group in groups:
                if group not in self.argument:
                    print(f'`{task}.{group}` is not related to any argument group')
                    continue
                deep_set(data, keys=[task, group], value=deepcopy(self.argument[group]))

        def check_override(path, value):
            # Check existence
            old = deep_get(data, keys=path, default=None)
            if old is None:
                print(f'`{".".join(path)}` is not a existing argument')
                return False
            # Check type
            # But allow `Interval` to be different
            old_value = old.get('value', None) if isinstance(old, dict) else old
            value = old.get('value', None) if isinstance(value, dict) else value
            if type(value) != type(old_value) \
                    and old_value is not None \
                    and path[2] not in ['SuccessInterval', 'FailureInterval']:
                print(
                    f'`{value}` ({type(value)}) and `{".".join(path)}` ({type(old_value)}) are in different types')
                return False
            # Check option
            if isinstance(old, dict) and 'option' in old:
                if value not in old['option']:
                    print(f'`{value}` is not an option of argument `{".".join(path)}`')
                    return False
            return True

        # Set defaults
        for p, v in deep_iter(self.default, depth=3):
            if not check_override(p, v):
                continue
            deep_set(data, keys=p + ['value'], value=v)
        # Override non-modifiable arguments
        for p, v in deep_iter(self.override, depth=3):
            if not check_override(p, v):
                continue
            if isinstance(v, dict):
                typ = v.get('type')
                if typ == 'state':
                    pass
                elif typ == 'lock':
                    deep_default(v, keys='display', value="disabled")
                elif deep_get(v, keys='value') is not None:
                    deep_default(v, keys='display', value='hide')
                for arg_k, arg_v in v.items():
                    deep_set(data, keys=p + [arg_k], value=arg_v)
            else:
                deep_set(data, keys=p + ['value'], value=v)
                deep_set(data, keys=p + ['display'], value='hide')
        # Set command
        for path, groups in deep_iter(self.task, depth=3):
            if 'tasks' not in path:
                continue
            task = path[2]
            if deep_get(data, keys=f'{task}.Scheduler.Command'):
                deep_set(data, keys=f'{task}.Scheduler.Command.value', value=task)
                deep_set(data, keys=f'{task}.Scheduler.Command.display', value='hide')

        return data

    @timer
    def generate_code(self):
        """
        Generate python code.

        args.json ---> config_generated.py

        """
        visited_group = set()
        visited_path = set()
        lines = CONFIG_IMPORT
        for path, data in deep_iter(self.argument, depth=2):
            group, arg = path
            if group not in visited_group:
                lines.append('')
                lines.append(f'    # Group `{group}`')
                visited_group.add(group)

            option = ''
            if 'option' in data and data['option']:
                option = '  # ' + ', '.join([str(opt) for opt in data['option']])
            path = '.'.join(path)
            lines.append(f'    {path_to_arg(path)} = {repr(parse_value(data["value"], data=data))}{option}')
            visited_path.add(path)

        with open(filepath_code(), 'w', encoding='utf-8', newline='') as f:
            for text in lines:
                f.write(text + '\n')

    @timer
    def generate_stored(self):
        import module.config.stored.classes as classes
        gen = get_generator()
        gen.add('from module.config.stored.classes import (')
        with gen.tab():
            for cls in sorted([name for name in dir(classes) if name.startswith('Stored')]):
                gen.add(cls + ',')
        gen.add(')')
        gen.Empty()
        gen.Empty()
        gen.Empty()
        gen.CommentAutoGenerage('module/config/config_updater.py')

        with gen.Class('StoredGenerated'):
            for path, data in deep_iter(self.args, depth=3):
                cls = data.get('stored')
                if cls:
                    gen.add(f'{path[-1]} = {cls}("{".".join(path)}")')

        gen.write('module/config/stored/stored_generated.py')

    @cached_property
    def relics_nickname(self):
        return read_file('tasks/relics/keywords/relicset_nickname.json')

    @timer
    def generate_i18n(self, lang):
        """
        Load old translations and generate new translation file.

                     args.json ---+-----> i18n/<lang>.json
        (old) i18n/<lang>.json ---+

        """
        new = {}
        old = read_file(filepath_i18n(lang))

        def deep_load(keys, default=True, words=('name', 'help')):
            for word in words:
                k = keys + [str(word)]
                d = ".".join(k) if default else str(word)
                v = deep_get(old, keys=k, default=d)
                deep_set(new, keys=k, value=v)

        # Menu
        for path, data in deep_iter(self.task, depth=3):
            if 'tasks' not in path:
                continue
            task_group, _, task = path
            deep_load(['Menu', task_group])
            deep_load(['Task', task])
        # Arguments
        visited_group = set()
        for path, data in deep_iter(self.argument, depth=2):
            if path[0] not in visited_group:
                deep_load([path[0], '_info'])
                visited_group.add(path[0])
            deep_load(path)
            if 'option' in data:
                deep_load(path, words=data['option'], default=False)

        # Package names
        # for package, server in VALID_PACKAGE.items():
        #     path = ['Emulator', 'PackageName', package]
        #     if deep_get(new, keys=path) == package:
        #         deep_set(new, keys=path, value=server.upper())
        # for package, server_and_channel in VALID_CHANNEL_PACKAGE.items():
        #     server, channel = server_and_channel
        #     name = deep_get(new, keys=['Emulator', 'PackageName', to_package(server)])
        #     if lang == SERVER_TO_LANG[server]:
        #         value = f'{name} {channel}渠道服 {package}'
        #     else:
        #         value = f'{name} {package}'
        #     deep_set(new, keys=['Emulator', 'PackageName', package], value=value)
        # Game server names
        # for server, _list in VALID_SERVER_LIST.items():
        #     for index in range(len(_list)):
        #         path = ['Emulator', 'ServerName', f'{server}-{index}']
        #         prefix = server.split('_')[0].upper()
        #         prefix = '国服' if prefix == 'CN' else prefix
        #         deep_set(new, keys=path, value=f'[{prefix}] {_list[index]}')

        ingame_lang = gui_lang_to_ingame_lang(lang)
        dailies = deep_get(self.argument, keys='Dungeon.Name.option')
        # Dungeon names
        i18n_memories = {
            'cn': '材料：角色经验（{dungeon} {world}）',
            'cht': '材料：角色經驗（{dungeon} {world}）',
            'jp': '素材：役割経験（{dungeon} {world}）：',
            'en': 'Material: Character EXP ({dungeon}, {world})',
            'es': 'Material: EXP de personaje ({dungeon}, {world})',
        }
        i18n_aether = {
            'cn': '材料：武器经验（{dungeon} {world}）',
            'cht': '材料：武器經驗（{dungeon} {world}）',
            'jp': '素材：武器経験（{dungeon} {world}）',
            'en': 'Material: Light Cone EXP ({dungeon}, {world})',
            'es': 'Material: EXP de conos de luz ({dungeon}, {world})',
        }
        i18n_treasure = {
            'cn': '材料：信用点（{dungeon} {world}）',
            'cht': '材料：信用點（{dungeon} {world}）',
            'jp': '素材：クレジット（{dungeon} {world}）',
            'en': 'Material: Credit ({dungeon}, {world})',
            'es': 'Material: Créditos ({dungeon}, {world})',
        }
        i18n_crimson = {
            'cn': '行迹材料：{path}（{plane}）',
            'cht': '行跡材料：{path}（{plane}）',
            'jp': '軌跡素材：{path}（{plane}）',
            'en': 'Trace: {path} ({plane})',
            'es': 'Rastros: {path} ({plane})',
        }
        i18n_relic = {
            'cn': '遗器：{relic}（{dungeon}）',
            'cht': '遺器：{relic}（{dungeon}）',
            'jp': '遺器：{relic}（{dungeon}）',
            'en': 'Relics: {relic} ({dungeon})',
            'es': 'Artefactos: {relic} ({dungeon})',
        }
        i18n_ornament = {
            'cn': '饰品：{relic}（{dungeon}）',
            'cht': '飾品：{relic}（{dungeon}）',
            'jp': '飾品：{relic}（{dungeon}）',
            'en': 'Ornament: {relic} ({dungeon})',
            'es': 'Ornamentos: {relic} ({dungeon})',
        }

        from tasks.dungeon.keywords import DungeonList, DungeonDetailed
        def relicdungeon2name(dun: DungeonList):
            dungeon_id = dun.dungeon_id
            relic_list = []
            for name, row in self.relics_nickname.items():
                if row.get('dungeon_id') == dungeon_id:
                    relic_list.append(row.get(ingame_lang, ''))
            return ' & '.join(relic_list)

        for dungeon in DungeonList.instances.values():
            dungeon: DungeonList = dungeon
            dungeon_name = dungeon.__getattribute__(ingame_lang)
            dungeon_name = re.sub('[「」]', '', dungeon_name)
            if dungeon.world:
                world_name = re.sub('[「」]', '', dungeon.world.__getattribute__(ingame_lang))
            else:
                world_name = ''
            if dungeon.is_Calyx_Golden_Memories:
                deep_set(new, keys=['Dungeon', 'Name', dungeon.name],
                         value=i18n_memories[ingame_lang].format(dungeon=dungeon_name, world=world_name))
            if dungeon.is_Calyx_Golden_Aether:
                deep_set(new, keys=['Dungeon', 'Name', dungeon.name],
                         value=i18n_aether[ingame_lang].format(dungeon=dungeon_name, world=world_name))
            if dungeon.is_Calyx_Golden_Treasures:
                deep_set(new, keys=['Dungeon', 'Name', dungeon.name],
                         value=i18n_treasure[ingame_lang].format(dungeon=dungeon_name, world=world_name))
            if dungeon.is_Calyx_Crimson:
                plane = dungeon.plane.__getattribute__(ingame_lang)
                plane = re.sub('[「」"]', '', plane)
                path = dungeon.Calyx_Crimson_Path.__getattribute__(ingame_lang)
                deep_set(new, keys=['Dungeon', 'Name', dungeon.name],
                         value=i18n_crimson[ingame_lang].format(path=path, plane=plane))
            if dungeon.is_Cavern_of_Corrosion:
                value = relicdungeon2name(dungeon)
                value = i18n_relic[ingame_lang].format(dungeon=dungeon_name, relic=value)
                value = value.replace('Cavern of Corrosion: ', '')
                deep_set(new, keys=['Dungeon', 'Name', dungeon.name], value=value)
            if dungeon.is_Ornament_Extraction:
                value = relicdungeon2name(dungeon)
                value = i18n_ornament[ingame_lang].format(dungeon=dungeon_name, relic=value)
                value = re.sub(
                    r'(•差分宇宙'
                    r'|Divergent Universe: '
                    r'|階差宇宙・'
                    r'|: Universo Diferenciado'
                    r'|Universo Diferenciado: '
                    r')', '', value)
                deep_set(new, keys=['Ornament', 'Dungeon', dungeon.name], value=value)

        # Stagnant shadows with character names
        for dungeon in DungeonDetailed.instances.values():
            if dungeon.name in dailies:
                value = dungeon.__getattribute__(ingame_lang)
                deep_set(new, keys=['Dungeon', 'Name', dungeon.name], value=value)

        # Copy dungeon i18n to double events
        def update_dungeon_names(keys):
            for dungeon in deep_get(self.argument, keys=f'{keys}.option', default=[]):
                value = deep_get(new, keys=['Dungeon', 'Name', dungeon])
                if value:
                    deep_set(new, keys=f'{keys}.{dungeon}', value=value)

        update_dungeon_names('Dungeon.NameAtDoubleCalyx')
        update_dungeon_names('Dungeon.NameAtDoubleRelic')

        # Character names
        i18n_trailblazer = {
            'cn': '开拓者',
            'cht': '開拓者',
            'jp': '開拓者',
            'en': 'Trailblazer',
            'es': 'Trailblazer',
        }
        from tasks.character.keywords import CharacterList
        from tasks.character.aired_version import get_character_version
        characters = deep_get(self.argument, keys='DungeonSupport.Character.option')
        for character in CharacterList.instances.values():
            if character.name in characters:
                value = character.__getattribute__(ingame_lang)
                version = get_character_version(character)
                if version:
                    value = f'[{version}] {value}'
                if 'trailblazer' in value.lower():
                    value = re.sub('Trailblazer', i18n_trailblazer[ingame_lang], value)
                deep_set(new, keys=['DungeonSupport', 'Character', character.name], value=value)

        # Assignments
        from tasks.assignment.keywords import AssignmentEntryDetailed
        for entry in AssignmentEntryDetailed.instances.values():
            entry: AssignmentEntryDetailed
            value = entry.__getattribute__(ingame_lang)
            for i in range(4):
                deep_set(new, keys=['Assignment', f'Name_{i + 1}', entry.name], value=value)

        # Echo of War
        dungeons = [d for d in DungeonList.instances.values() if d.is_Echo_of_War]
        for dungeon in dungeons:
            world = dungeon.plane.world
            world_name = world.__getattribute__(ingame_lang)
            dungeon_name = dungeon.__getattribute__(ingame_lang).replace('Echo of War: ', '')
            value = f'{dungeon_name} ({world_name})'
            deep_set(new, keys=['Weekly', 'Name', dungeon.name], value=value)
        # Rogue worlds
        for dungeon in [d for d in DungeonList.instances.values() if d.is_Simulated_Universe]:
            name = deep_get(new, keys=['RogueWorld', 'World', dungeon.name], default=None)
            if name:
                deep_set(new, keys=['RogueWorld', 'World', dungeon.name], value=dungeon.__getattribute__(ingame_lang))
        # Planner items
        from tasks.planner.keywords.classes import ItemBase
        for item in ItemBase.instances.values():
            item: ItemBase = item
            name = f'Item_{item.name}'
            if item.is_ItemValuable:
                continue
            if item.is_ItemCurrency or item.name == 'Tracks_of_Destiny':
                i18n = item.__getattribute__(ingame_lang)
            elif item.is_ItemExp and item.is_group_base:
                dungeon = item.dungeon
                if dungeon is None:
                    i18n = item.__getattribute__(ingame_lang)
                elif dungeon.is_Calyx_Golden_Memories:
                    i18n = i18n_memories[ingame_lang]
                elif dungeon.is_Calyx_Golden_Aether:
                    i18n = i18n_aether[ingame_lang]
                else:
                    continue
                if res := re.search(r'[:：](.*)[(（]', i18n):
                    i18n = res.group(1).strip()
            elif item.is_ItemAscension or (item.is_ItemTrace and item.is_group_base):
                dungeon = item.group_base.dungeon.name
                i18n = deep_get(new, keys=['Dungeon', 'Name', dungeon], default='Unknown_Dungeon_Come_From')
            elif item.is_ItemWeekly:
                dungeon = item.dungeon.name
                i18n = deep_get(new, keys=['Weekly', 'Name', dungeon], default='Unknown_Dungeon_Come_From')
            elif item.is_ItemCalyx and item.is_group_base:
                i18n = item.__getattribute__(ingame_lang)
            else:
                continue
            deep_set(new, keys=['Planner', name, 'name'], value=i18n)
            deep_set(new, keys=['Planner', name, 'help'], value='')

        # GUI i18n
        for path, _ in deep_iter(self.gui, depth=2):
            group, key = path
            deep_load(keys=['Gui', group], words=(key,))

        # zh-TW
        dic_repl = {
            '設置': '設定',
            '支持': '支援',
            '啓': '啟',
            '异': '異',
            '服務器': '伺服器',
            '文件': '檔案',
            '自定義': '自訂'
        }
        if lang == 'zh-TW':
            for path, value in deep_iter(new, depth=3):
                for before, after in dic_repl.items():
                    value = value.replace(before, after)
                deep_set(new, keys=path, value=value)

        write_file(filepath_i18n(lang), new)

    @cached_property
    def menu(self):
        """
        Generate menu definitions

        task.yaml --> menu.json

        """
        data = {}
        for task_group in self.task.keys():
            value = deep_get(self.task, keys=[task_group, 'menu'])
            if value not in ['collapse', 'list']:
                value = 'collapse'
            deep_set(data, keys=[task_group, 'menu'], value=value)
            value = deep_get(self.task, keys=[task_group, 'page'])
            if value not in ['setting', 'tool']:
                value = 'setting'
            deep_set(data, keys=[task_group, 'page'], value=value)
            tasks = deep_get(self.task, keys=[task_group, 'tasks'], default={})
            tasks = list(tasks.keys())
            deep_set(data, keys=[task_group, 'tasks'], value=tasks)

        # Simulated universe is WIP, task won't show on GUI but can still be bound
        # e.g. `RogueUI('src', task='Rogue')`
        # Comment this for development
        # data.pop('Rogue')

        return data

    @cached_property
    def stored(self):
        import module.config.stored.classes as classes
        data = {}
        for path, value in deep_iter(self.args, depth=3):
            if value.get('type') not in ['stored', 'planner']:
                continue
            name = path[-1]
            stored = value.get('stored')
            stored_class = getattr(classes, stored)
            row = {
                'name': name,
                'path': '.'.join(path),
                'i18n': f'{path[1]}.{path[2]}.name',
                'stored': stored,
                'attrs': stored_class('')._attrs,
                'order': value.get('order', 0),
                'color': value.get('color', '#777777')
            }
            data[name] = row

        # sort by `order` ascending, but `order`==0 at last
        data = sorted(data.items(), key=lambda kv: (kv[1]['order'] == 0, kv[1]['order']))
        data = {k: v for k, v in data}
        return data

    @staticmethod
    def generate_deploy_template():
        template = poor_yaml_read(DEPLOY_TEMPLATE)
        cn = {
            'Repository': 'cn',
            'PypiMirror': 'https://pypi.tuna.tsinghua.edu.cn/simple',
            'Language': 'zh-CN',
        }
        aidlux = {
            'GitExecutable': '/usr/bin/git',
            'PythonExecutable': '/usr/bin/python',
            'RequirementsFile': './deploy/AidLux/0.92/requirements.txt',
            'AdbExecutable': '/usr/bin/adb',
        }

        docker = {
            'GitExecutable': '/usr/bin/git',
            'PythonExecutable': '/usr/local/bin/python',
            'RequirementsFile': './deploy/docker/requirements.txt',
            'AdbExecutable': '/usr/bin/adb',
        }

        def update(suffix, *args):
            file = f'./config/deploy.{suffix}.yaml'
            new = deepcopy(template)
            for dic in args:
                new.update(dic)
            poor_yaml_write(data=new, file=file)

        update('template')
        update('template-cn', cn)
        # update('template-AidLux', aidlux)
        # update('template-AidLux-cn', aidlux, cn)
        # update('template-docker', docker)
        # update('template-docker-cn', docker, cn)

        tpl = {
            'Repository': '{{repository}}',
            'GitExecutable': '{{gitExecutable}}',
            'PythonExecutable': '{{pythonExecutable}}',
            'AdbExecutable': '{{adbExecutable}}',
            'Language': '{{language}}',
            'Theme': '{{theme}}',
        }

        def update(file, *args):
            new = deepcopy(template)
            for dic in args:
                new.update(dic)
            poor_yaml_write(data=new, file=file)

        update('./webapp/packages/main/public/deploy.yaml.tpl', tpl)

    def check_character_templates(self):
        characters = deep_get(self.args, 'Dungeon.DungeonSupport.Character.option', default=[])
        for name in characters:
            if name == 'FirstCharacter':
                continue
            if name.startswith('Trailblazer'):
                for name in [f'Stelle{name[11:]}', f'Caelum{name[11:]}']:
                    if not os.path.exists(f'./assets/character/{name}.png'):
                        print(f'WARNING: character template not exist: {name}')
            else:
                if not os.path.exists(f'./assets/character/{name}.png'):
                    print(f'WARNING: character template not exist: {name}')

    @timer
    def generate(self):
        _ = self.args
        _ = self.menu
        _ = self.stored
        # _ = self.event
        # self.insert_server()
        write_file(filepath_args(), self.args)
        write_file(filepath_args('menu'), self.menu)
        write_file(filepath_args('stored'), self.stored)
        self.generate_code()
        self.generate_stored()
        for lang in LANGUAGES:
            self.generate_i18n(lang)
        self.generate_deploy_template()
        self.check_character_templates()

if __name__ == '__main__':
    """
    Process the whole config generation.

                 task.yaml -+----------------> menu.json
             argument.yaml -+-> args.json ---> config_generated.py
             override.yaml -+       |
                  gui.yaml --------\|
                                   ||
    (old) i18n/<lang>.json --------\\========> i18n/<lang>.json
    (old)    template.json ---------\========> template.json
    """
    # Ensure running in Alas root folder
    import os

    os.chdir(os.path.join(os.path.dirname(__file__), '../../'))

    ConfigGenerator().generate()
    ConfigUpdater().test_update_file('template', is_template=True)
